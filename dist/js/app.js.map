{"version":3,"sources":["app.js"],"names":["shop","currencies","basket","Item","name","price","qty","saveBasket","localStorage","setItem","JSON","stringify","listBasket","renderBasket","loadBasket","parse","getItem","totalCost","i","toFixed","basketCopy","item","itemCopy","p","push","populateCurrencies","currencyDropdown","document","querySelector","currencyTotal","currencyTpl","currencyTplErr","access_key","$","ajax","url","dataType","success","json","key","quotes","abbr","split","USDAgainstGBP","rate","Number","innerHTML","error","xhr","currentBasket","basketEl","totalEl","totalCostEl","step1El","step2El","lineItems","forEach","length","classList","remove","add","addItem","console","log","addToBasketBtn","e","currentTarget","dataset","target","parentElement","updateTotal","currencyEl","removeItem","removeItemAll","splice","countItems","totalItems","clearBasket","revealTotals","init","buttons","querySelectorAll","button","addEventListener","type"],"mappings":"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","file":"app.js","sourcesContent":["var shop = (() => {\r\n\r\n    var currencies = [];\r\n    var basket = []; \r\n\r\n    // PRIVATE methods\r\n\r\n    // Base properties of our item class declared first\r\n    function Item(name, price, qty) {\r\n        this.name = name,\r\n        this.price = price,\r\n        this.qty = qty\r\n    }; \r\n    \r\n    /* Save the basket to Local Storage so it can be passed to another view,\r\n        or retrieved.\r\n        Local Storage requires a string, so our object must be stringified.\r\n    */\r\n    var saveBasket = () => {  \r\n        localStorage.setItem('basketContents', JSON.stringify(listBasket()));\r\n        renderBasket();\r\n    };\r\n\r\n    // Load up the basket from local storage if present\r\n    var loadBasket = () => { \r\n        basket = JSON.parse(localStorage.getItem('basketContents')) || [];\r\n    }; \r\n\r\n    // Return the basket value based on currency of the original Items\r\n    var totalCost = () => { \r\n        let totalCost = 0;\r\n        for ( let i in basket ) {\r\n            totalCost += ( basket[i].price * basket[i].qty )\r\n        }\r\n        return totalCost.toFixed(2);\r\n    }; \r\n   \r\n\r\n    // Decouple the basket. Copy it, so it's not a reference.\r\n    // It's an array of objects so needs to be looped over at two levels.\r\n    var listBasket = () => {\r\n        let basketCopy = []; \r\n        for ( var i in basket ){\r\n            let item = basket[i];\r\n            let itemCopy = {};\r\n                for ( var p in item[p] ) {\r\n                    itemCopy[p] = item[p]\r\n                }\r\n                basketCopy.push(item);\r\n            }\r\n        return basketCopy\r\n    };\r\n \r\n\r\n    // Fetch currencies from endpoint to populate dropdown.  \r\n    var populateCurrencies = () => {   \r\n        const currencyDropdown = document.querySelector('.js-currencies');\r\n        const currencyTotal = document.querySelector('.js-currency');  \r\n        var currencyTpl = '';\r\n        var currencyTplErr = \r\n        `<li class=\"dropdown-item dropdown-item--error\"> \r\n        <p>Sorry, no currencies available at the moment!</p>\r\n        <p>In the meantime, try a manual conversion at <a href=\"http://xe.com/\">Xe.com</a> while we fix it.\r\n        </li>`;\r\n        \r\n            // Populate dropdown with available currencies from APILayer.net\r\n            const access_key = '0f0cd603e88461f93914c25ac233252a';  \r\n            // Using popular jQuery Ajax call for ease of integration and as recommended in API's docs.\r\n            $.ajax({\r\n                url: 'http://apilayer.net/api/live?access_key=' + access_key,   \r\n                dataType: 'jsonp',\r\n                success: (json) => { \r\n                    if(json.success){  \r\n                        for( let key in json.quotes ) { \r\n                            //Get the currency abbreviation from the key name\r\n                            let abbr = key.split('USD')[1];\r\n                            let USDAgainstGBP = json.quotes['USDGBP'];\r\n                            let rate = Number( (json.quotes[key] / USDAgainstGBP).toFixed(2)  )\r\n                            \r\n                            currencies.push( { abbr, rate } )\r\n                            currencyTpl += \r\n                            `<li class=\"dropdown-item\" data-type=\"currency\" data-name=\"${abbr}\" data-rate=\"${rate}\"> \r\n                                ${abbr} - <span class=\"text-muted\"><small>${rate}</small></span>\r\n                            </li>`\r\n                        }\r\n                        currencyDropdown.innerHTML = currencyTpl; \r\n                    } else { \r\n                        // Helpful message in dropdown if response doesnt indicate success\r\n                        currencyDropdown.innerHTML = currencyTplErr; \r\n                    }\r\n                },\r\n                error: (xhr) => { \r\n                    // Helpful message in dropdown if no currencies can be retrieved\r\n                    currencyDropdown.innerHTML = currencyTplErr; \r\n                }\r\n            });  \r\n    };\r\n\r\n    // Populate the UL element with the items\r\n    var renderBasket = () => {\r\n        // Get the latest saved basket\r\n        let currentBasket = listBasket();\r\n        // Cache DOM elements\r\n        let basketEl = document.querySelector('.js-basket-items');\r\n        let totalEl = document.querySelector('.js-totalItems');\r\n        let totalCostEl = document.querySelector('.js-totalCost');\r\n        var step1El = document.querySelector('.js-reveal-step1');  \r\n        var step2El = document.querySelector('.js-reveal-step2');  \r\n\r\n        // Generate new markup\r\n        var lineItems = '';\r\n        currentBasket.forEach( (item) => { \r\n            lineItems += \r\n                `<li class=\"list-group-item p-3\"> \r\n                <p class=\"mb-0 float-left\"><strong>${item.name}</strong>\r\n                <span class=\"text-muted basket-qty\">qty: ${item.qty}</span>\r\n                <div class=\"increment-btns float-right\">\r\n                    <span class=\"btn btn-outline-danger btn-sm btn-increment js-remove-item\" data-type=\"remove-item\" data-name=\"${item.name}\">-</span> \r\n                    <span class=\"btn btn-outline-success btn-sm btn-increment js-remove-item\" data-type=\"add-item\" data-name=\"${item.name}\">+</span> \r\n                </div>\r\n                </li>`\r\n        });\r\n        \r\n        // Populate the DOM with updated basket\r\n        basketEl.innerHTML = lineItems;\r\n        totalEl.innerHTML = `${  currentBasket.length < 1 ? 'Basket empty' : currentBasket.length + ' products' } `; \r\n        totalCostEl.innerHTML = totalCost(); \r\n        \r\n        // Hide elements on each basket change if nothing in basket\r\n        if (currentBasket.length < 1) {\r\n            step1El.classList.remove('show');\r\n            step1El.classList.add('hide');\r\n            step2El.classList.remove('show');\r\n            step2El.classList.add('hide');\r\n        } else {\r\n            step1El.classList.remove('hide');\r\n            step1El.classList.add('show');\r\n        }\r\n    }\r\n \r\n    \r\n    // PUBLIC methods returned by shop object\r\n\r\n    return {  \r\n\r\n        // Creates a new item and adds it to the basket\r\n        addItem: (name, price, qty) => {\r\n               console.log('item added: ', name)\r\n            /*  Loop through basket contents to check if item already added.\r\n                Incrementor buttons will reach this flow as item is already present.\r\n            */\r\n            for ( let i in basket ) { \r\n                if ( basket[i].name === name ) {\r\n                    basket[i].qty += 1;\r\n                    saveBasket(); \r\n                    return;\r\n                }\r\n            }\r\n    \r\n            // Item doesnt exist in cart. Add it, and save.\r\n            var item = new Item(name, price, qty);\r\n            basket.push(item);\r\n            saveBasket();\r\n        },\r\n    \r\n        // Handles the click and passes values to basket\r\n        addToBasketBtn: (e) => {\r\n            // Get product details from their data attrs\r\n            let name = e.currentTarget.dataset.name;\r\n            let price = Number(e.target.dataset.price || e.target.parentElement.dataset.price);\r\n            let qty = Number( e.target.dataset.qty ) \r\n            shop.addItem(name, price, 1);  \r\n        }, \r\n    \r\n       \r\n        // Update total when new currrency is clicked\r\n        updateTotal: (abbr, rate) => {\r\n            let totalEl = document.querySelector('.js-totalCost');\r\n            let currencyEl = document.querySelector('.js-currency'); \r\n            totalEl.innerHTML = Number(( totalCost() * rate ).toFixed(2));\r\n            currencyEl.innerHTML = abbr; \r\n        },\r\n       \r\n        // Handle decrease qty\r\n        removeItem: (name) => { \r\n            for ( let i in basket ) {\r\n    \r\n                // If item is in the basket, minus one from qty\r\n                if ( basket[i].name === name ) {\r\n                     basket[i].qty --; \r\n                    // Has it reached zero? Remove item from the basket array using function\r\n                    if ( basket[i].qty === 0 ) {\r\n                        shop.removeItemAll( basket[i].name );\r\n                    } \r\n                    // Update the view\r\n                    saveBasket();\r\n                    // Exit this function\r\n                    return;\r\n                }\r\n            }\r\n            saveBasket();\r\n        },\r\n    \r\n        // If qty is decreased to zero, remove that item\r\n        removeItemAll: (name) => {\r\n            for ( let i in basket ) {\r\n                // If item is in the basket, remove it\r\n                if ( basket[i].name === name ) {\r\n                    basket.splice(i, 1);\r\n                    break;\r\n                }\r\n            }\r\n            saveBasket();\r\n        },\r\n    \r\n        // Shows total products\r\n        countItems: () => {\r\n            let totalItems = 0;\r\n            for ( let i in basket ) {\r\n                totalItems += basket[i].qty;\r\n            }\r\n            return totalItems;\r\n        },\r\n    \r\n        // Clear the basket contents, save basket\r\n        clearBasket: () => {\r\n            basket = []; \r\n            saveBasket();\r\n        },\r\n\r\n         // When clicking Checkout, reveal the total and currency options with CSS\r\n        revealTotals: () => { \r\n            var step2El = document.querySelector('.js-reveal-step2');\r\n            step2El.classList.remove('hide');\r\n            step2El.classList.add('show');\r\n        }, \r\n    \r\n        /* Initialise functions on page load\r\n            - Load up a saved basket if there is one\r\n            - Display the basket\r\n            - Attach events to buttons\r\n        */\r\n    \r\n        init: () => { \r\n            // Load and render most recent saved basket\r\n            loadBasket();\r\n            renderBasket();\r\n            populateCurrencies();\r\n        } \r\n    }  \r\n      \r\n})(); \r\n  \r\nshop.init();\r\n \r\n/* \r\n    Attach Event listeners, using the public methods\r\n*/\r\n\r\n// Product buttons\r\nconst buttons = document.querySelectorAll('.js-add-item'); \r\nbuttons.forEach( (button) => { \r\n    button.addEventListener('click', shop.addToBasketBtn);\r\n});\r\n\r\n// Clear button\r\ndocument.querySelector('.js-clear').addEventListener('click', shop.clearBasket);\r\n\r\n// Checkout button\r\ndocument.querySelector('.js-checkout').addEventListener('click', shop.revealTotals);\r\n\r\n// Select currency\r\ndocument.querySelector('.js-currencies').addEventListener('click', (e) => {\r\n    if(e.target.dataset.type === \"currency\") {\r\n        let abbr = e.target.dataset.name;\r\n        let rate = e.target.dataset.rate;\r\n        shop.updateTotal(abbr, rate);\r\n    }\r\n});\r\n\r\n// Decrease button\r\ndocument.querySelector('.js-basket-items').addEventListener('click', (e) => {\r\n    if(e.target.dataset.type === \"remove-item\") {\r\n        let name = e.target.dataset.name \r\n        shop.removeItem(name);\r\n    }\r\n});\r\n\r\n// Increase button\r\ndocument.querySelector('.js-basket-items').addEventListener('click', (e) => {\r\n    if(e.target.dataset.type === \"add-item\") {\r\n        let name = e.target.dataset.name;\r\n        shop.addItem(name);\r\n    }\r\n});"]}